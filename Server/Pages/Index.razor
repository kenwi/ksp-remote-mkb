@page "/"
@using Grpc.Net.Client
@using Microsoft.AspNetCore.Components.Web
@using Blazor.Extensions.Canvas
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using Server.Services

@inject ScreenshotService ScreenshotService

<PageTitle>Index</PageTitle>
<img src="@Image64" width="1600" height="900" @onmousedown="@MouseClick" @onmouseup="@MouseUp" @onmousemove="@MouseMove" />

@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "updateframes")]
    public bool? UpdateFrames { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "framerate")]
    public int? FrameRate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "x")]
    public int? X { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "y")]
    public int? Y { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "rpcendpoint")]
    public string? RpcEndpoint { get; set; }

    Remote.RemoteClient? client;
    MouseEvent? outboundEvent = new();
    protected string Image64 { get; set; } = string.Empty;
    Random rng = new Random();
    Resolution monitor = new();
    DateTime last = new();
    ScreenCapture sc = new();
    float xmod = 0, ymod = 0;

    async void RunPeriodicImageUpdate(int millisecondsDelay)
    {
        while (true)
        {
            Image64 = ScreenshotService.Image64;
            StateHasChanged();
            await Task.Delay(millisecondsDelay);
        }
    }

    protected override void OnInitialized()
    {
        UpdateFrames = UpdateFrames ?? false;
        RpcEndpoint = RpcEndpoint ?? "https://localhost";
        FrameRate = 1000/FrameRate ?? 100;
        (X, Y) = (X ?? 1600, Y ?? 900);

        try
        {
            var identification = new Identification() { Id = Guid.Empty.ToString() };
            var channel = GrpcChannel.ForAddress(RpcEndpoint, new GrpcChannelOptions
                {
                    HttpHandler = new HttpClientHandler
                    {
                        ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                    }
                });
            client = new Remote.RemoteClient(channel);
            monitor = client.GetMonitorResolution(new Empty());

            if(UpdateFrames == false)
                RunPeriodicImageUpdate(100);
        }
        catch (Exception)
        {
            client = null;
            throw;
        }
        base.OnInitialized();
        
    }

    void CalculateRatio()
    {
        xmod = (float)monitor.X / 1600;
        ymod = (float)monitor.Y / 900;
    }

    void SetOutboundEvent(double x, double y, EventType eventType)
    {
        if (outboundEvent is null)
            return;

        outboundEvent.X = (int)(x * xmod) - 50;
        outboundEvent.Y = (int)(y * ymod) - 25;
        outboundEvent.Type = EventType.Leftdown;
    }

    protected async void MouseUp(MouseEventArgs e)
    {
        if ((DateTime.Now - last).Milliseconds < 100)
            return;
        if (outboundEvent is null || client is null)
            return;

        CalculateRatio();
        SetOutboundEvent(e.ClientX, e.ClientY, EventType.Leftup);
        await client.SendMouseEventAsync(outboundEvent);
    }

    protected async void MouseClick(MouseEventArgs e)
    {
        if ((DateTime.Now - last).Milliseconds < 100)
            return;
        if (outboundEvent is null || client is null)
            return;

        CalculateRatio();
        SetOutboundEvent(e.ClientX, e.ClientY, EventType.Leftdown);
        await client.SendMouseEventAsync(outboundEvent);
    }

    protected async void MouseMove(MouseEventArgs e)
    {
        if ((DateTime.Now - last).Milliseconds < 10)
            return;
        if (outboundEvent is null || client is  null)
            return;

        CalculateRatio();
        SetOutboundEvent(e.ClientX, e.ClientY, EventType.Move);
        await client.SendMouseEventAsync(outboundEvent);
    }
}
