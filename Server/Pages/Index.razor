@page "/"
@using Grpc.Net.Client
@using Microsoft.AspNetCore.Components.Web
@using Blazor.Extensions.Canvas
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using Server.Services

@inject IScreenshotService ScreenshotService

<PageTitle>Index</PageTitle>
@if(DisableInput!.Value)
{
    <img src="@Image64" width="@ResolutionX" height="@ResolutionY" />
}
else
{
    <img src="@Image64" width="@ResolutionX" height="@ResolutionY" @onmousedown="@HandleMouseEvents" @onmouseup="@HandleMouseEvents" @onmousemove="@HandleMouseEvents" />
}

@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "updateframes")]
    public bool? UpdateFrames { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "disableinput")]
    public bool? DisableInput { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "framerate")]
    public int? FrameRate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "x")]
    public int? ResolutionX { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "y")]
    public int? ResolutionY { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "rpcendpoint")]
    public string? RpcEndpoint { get; set; }

    Remote.RemoteClient? client;
    MouseEvent? outboundEvent = new();
    protected string Image64 { get; set; } = string.Empty;
    Random rng = new Random();
    Resolution monitor = new();
    DateTime last = new();
    ScreenCapture sc = new();
    float xmod = 0, ymod = 0;

    async void RunPeriodicImageUpdate(int millisecondsDelay)
    {
        while (true)
        {
            Image64 = ScreenshotService.Image64;
            StateHasChanged();
            await Task.Delay(millisecondsDelay);
        }
    }

    protected override void OnInitialized()
    {
        DisableInput = DisableInput ?? true;
        UpdateFrames = UpdateFrames ?? true;
        RpcEndpoint = RpcEndpoint ?? "https://localhost";
        FrameRate = 1000 / FrameRate ?? 100;
        (ResolutionX, ResolutionY) = (ResolutionX ?? 1600, ResolutionY ?? 900);

        try
        {
            var identification = new Identification() { Id = Guid.Empty.ToString() };
            var channel = GrpcChannel.ForAddress(RpcEndpoint, new GrpcChannelOptions
                {
                    HttpHandler = new HttpClientHandler
                    {
                        ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                    }
                });
            client = new Remote.RemoteClient(channel);
            monitor = client.GetMonitorResolution(new Empty());

            if (UpdateFrames == true)
                RunPeriodicImageUpdate(FrameRate.Value);
        }
        catch (Exception)
        {
            client = null;
            throw;
        }
        base.OnInitialized();
    }

    void CalculateServerAndClientResolutionRatio()
    {
        if (ResolutionX is null || ResolutionY is null)
            throw new Exception("No client resolution set");
        if (monitor is null)
            throw new Exception("No server monitor resolution set");

        xmod = (float)monitor.X / (int)ResolutionX;
        ymod = (float)monitor.Y / (int)ResolutionY;
    }

    protected async void HandleMouseEvents(MouseEventArgs e)
    {
        if ((DateTime.Now - last).Milliseconds < 100)
            return;

        if (outboundEvent is null || client is null)
            throw new Exception("Either no outboundEvent or no client exists");

        CalculateServerAndClientResolutionRatio();
        outboundEvent.X = (int)(e.ClientX * xmod) - 50;
        outboundEvent.Y = (int)(e.ClientY * ymod) - 25;
        outboundEvent.Type = e.Type switch
        {
            "mousemove" => EventType.Move,
            "mousedown" => EventType.Leftdown,
            "mouseup" => EventType.Leftup
        };
        await client.SendMouseEventAsync(outboundEvent);
    }

}
